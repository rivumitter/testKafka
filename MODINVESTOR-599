@Test
  public void canUpdateAServicePointWithHoldShelfExpiryPeriodAndHoldShelfCloseLibraryDateManagementAndNotBeingPickupLocation()
    throws InterruptedException,
    ExecutionException,
    TimeoutException,
    MalformedURLException {
    UUID id = UUID.randomUUID();
    createServicePoint(id, "Circ Desk 1", "cd1",
      "Circulation Desk -- Hallway", null, 20,
      false, null);
    JsonObject request = new JsonObject()
      .put("id", id.toString())
      .put("name", "Circ Desk 2")
      .put("code", "cd2")
      .put("discoveryDisplayName", "Circulation Desk -- Basement")
      .put("pickupLocation", true)
      .put("holdShelfCloseLibraryDateManagement", Servicepoint.HoldShelfCloseLibraryDateManagement.MOVE_TO_BEGINNING_OF_NEXT_OPEN_SERVICE_POINT_HOURS.value())
      .put("holdShelfExpiryPeriod", new JsonObject(
        Json.encode(createHoldShelfExpiryPeriod(5, HoldShelfExpiryPeriod.IntervalId.WEEKS)))
      );
    CompletableFuture<Response> updated = new CompletableFuture<>();
    send(servicePointsUrl("/" + id.toString()), HttpMethod.PUT, request.encode(),
      SUPPORTED_CONTENT_TYPE_JSON_DEF, ResponseHandler.any(updated));

    Response updateResponse = updated.get(10, TimeUnit.SECONDS);
    assertThat(updateResponse.getStatusCode(), is(HttpURLConnection.HTTP_NO_CONTENT));
    Response getResponse = getById(id);
    JsonObject responseJson = getResponse.getJson();
    assertThat(responseJson.getString("id"), is(id.toString()));
    assertThat(responseJson.getString("code"), is("cd2"));
    assertThat(responseJson.getString("name"), is("Circ Desk 2")); //should fail
    assertThat(responseJson.getBoolean("pickupLocation"), is(true));
    assertThat(responseJson.getString("holdShelfCloseLibraryDateManagement"),
      is (Servicepoint.HoldShelfCloseLibraryDateManagement.MOVE_TO_BEGINNING_OF_NEXT_OPEN_SERVICE_POINT_HOURS.value()));

    JsonObject holdShelfExpiryPeriod = responseJson.getJsonObject("holdShelfExpiryPeriod");
    assertThat(holdShelfExpiryPeriod.getInteger("duration"), is (5));
    assertThat(holdShelfExpiryPeriod.getString("intervalId"), is (HoldShelfExpiryPeriod.IntervalId.WEEKS.toString()));
  }
  
  
  
  =================================================================== service pt json ================
  
  {
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "A service point",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "description": "Id of service-point object"
    },
    "name": {
      "type": "string",
      "description" : "service-point name, a required field"
    },
    "code": {
      "type": "string",
      "description" : "service-point code, a required field"
    },
    "discoveryDisplayName": {
      "type": "string",
      "description": "display name, a required field"
    },
    "description": {
      "type": "string",
      "description" : "description of the service-point"
    },
    "shelvingLagTime": {
      "type": "integer",
      "description": "shelving lag time"
    },
    "pickupLocation": {
      "type": "boolean",
      "description": "indicates whether or not the service point is a pickup location"
    },
    "holdShelfExpiryPeriod" :{
      "type": "object",
      "$ref": "time-period.json",
      "description": "expiration period for items on the hold shelf at the service point"
    },
    "holdShelfCloseLibraryDateManagement": {
      "type": "string",
      "description": "enum for closeLibraryDateManagement associated with hold shelf",
      "enum":[
        "Keep_the_current_due_date",
        "Move_to_the_end_of_the_previous_open_day",
        "Move_to_the_end_of_the_next_open_day",
        "Keep_the_current_due_date_time",
        "Move_to_end_of_current_service_point_hours",
        "Move_to_beginning_of_next_open_service_point_hours"
      ],
      "default" : "Keep_the_current_due_date"
    },
    "staffSlips": {
      "type": "array",
      "description": "List of staff slips for this service point",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$",
            "description": "The ID of the staff slip"
          },
          "printByDefault": {
            "type": "boolean",
            "description": "Whether or not to print the staff slip by default"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "printByDefault"
        ]
      }
    },
    "metadata": {
      "type": "object",
      "$ref": "raml-util/schemas/metadata.schema",
      "readonly": true
    }
  },
  "additionalProperties": false,
  "required": [
    "name",
    "code",
    "discoveryDisplayName",
    "holdShelfCloseLibraryDateManagement"
  ]
}

  
  
  
  
