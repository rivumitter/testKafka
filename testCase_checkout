@Test
  void canCheckOutUsingDueDateLimitedRollingLoanPolicy() {
    FixedDueDateSchedulesBuilder dueDateLimitSchedule = new FixedDueDateSchedulesBuilder()
      .withName("March Only Due Date Limit")
      .addSchedule(FixedDueDateSchedule.wholeMonth(2018, 3));

    final UUID dueDateLimitScheduleId = loanPoliciesFixture.createSchedule(
      dueDateLimitSchedule).getId();

    LoanPolicyBuilder dueDateLimitedPolicy = new LoanPolicyBuilder()
      .withName("Due Date Limited Rolling Policy")
      .rolling(Period.days(30))
      .limitedBySchedule(dueDateLimitScheduleId);

    final IndividualResource loanPolicy = loanPoliciesFixture.create(
      dueDateLimitedPolicy);
    final IndividualResource overdueFinePolicy = overdueFinePoliciesFixture.facultyStandard();
    final IndividualResource lostItemFeePolicy = lostItemFeePoliciesFixture.facultyStandard();

    UUID dueDateLimitedPolicyId = loanPolicy.getId();

    useFallbackPolicies(dueDateLimitedPolicyId,
      requestPoliciesFixture.allowAllRequestPolicy().getId(),
      noticePoliciesFixture.activeNotice().getId(),
      overdueFinePolicy.getId(),
      lostItemFeePolicy.getId());

    IndividualResource smallAngryPlanet = itemsFixture.basedUponSmallAngryPlanet();
    final IndividualResource steve = usersFixture.steve();

    final ZonedDateTime loanDate = ZonedDateTime.of(2018, 3, 18, 11, 43, 54, 0, UTC);

    final IndividualResource response = checkOutFixture.checkOutByBarcode(
      new CheckOutByBarcodeRequestBuilder()
        .forItem(smallAngryPlanet)
        .to(steve)
        .on(loanDate)
        .at(UUID.randomUUID()));

     JsonObject loan = response.getJson();
    String loanPolicyId = loan.getString("loanPolicyId");
    System.out.println("loanPolicyId-->"+loanPolicyId);

    final IndividualResource servicePoint = servicePointsFixture.cd1();
    final IndividualResource holdRequestJessica = requestsClient.create(new RequestBuilder()
      .hold()
      .forItem(smallAngryPlanet)
      .withPickupServicePointId(servicePoint.getId())
      .by(usersFixture.jessica()));

    final IndividualResource holdRequest = requestsClient.create(new RequestBuilder()
      .hold()
      .forItem(smallAngryPlanet)
      .withPickupServicePointId(servicePoint.getId())
      .by(usersFixture.james()));

    checkInFixture.checkInByBarcode(smallAngryPlanet);

    //update loan,
    final Period alternateCheckoutLoanPeriod = Period.from(2, "Weeks");

    final ZonedDateTime systemTime = ZonedDateTime.of(2019, 6, 14, 11, 23, 43, 0, UTC);

    //create loan policy
    LoanPolicyBuilder loanPolicyBuilder = new LoanPolicyBuilder()
      .rolling(Period.months(1))
      .withAlternateCheckoutLoanPeriod(alternateCheckoutLoanPeriod);
    loanPolicyClient.replace(UUID.fromString(loanPolicyId),loanPolicyBuilder);
    CheckOutResource checkOutResource = checkOutFixture.checkOutByBarcode(smallAngryPlanet, usersFixture.jessica());

    System.out.println("final response->>"+checkOutResource.getJson().toString());


    assertThat("loan date should be as supplied",
      loan.getString("loanDate"), isEquivalentTo(loanDate));

    loanHasPatronGroupProperties(loan, "Regular Group");

    loanHasLoanPolicyProperties(loan, loanPolicy);
    loanHasOverdueFinePolicyProperties(loan, overdueFinePolicy);
    loanHasLostItemPolicyProperties(loan, lostItemFeePolicy);

    assertThat("due date should be limited by schedule",
      loan.getString("dueDate"),
      isEquivalentTo(ZonedDateTime.of(2018, 3, 31, 23, 59, 59, 0, UTC)));
  }
