.map(calculatedRequest-> modifyHoldShelfExpirationDateBasedOnExpirationDateManagement(tenantTimeZone, calculatedRequest));


private Request modifyHoldShelfExpirationDateBasedOnExpirationDateManagement(ZoneId tenantTimeZone, Request calculatedRequest) {
    ExpirationDateManagement expirationDateManagement = calculatedRequest.getPickupServicePoint().getHoldShelfClosedLibraryDateManagement();
    calendarRepository.lookupOpeningDays(calculatedRequest.getHoldShelfExpirationDate().toLocalDate(),
        calculatedRequest.getPickupServicePoint().getId())
      .thenApply(adjacentOpeningDaysResult -> {
        try {
          return closedLibraryStrategyService.applyClosedLibraryStrategyForHoldShelfExpirationDate(
            expirationDateManagement, calculatedRequest.getHoldShelfExpirationDate(),
            tenantTimeZone, adjacentOpeningDaysResult.value(), calculatedRequest.getPickupServicePoint().getHoldShelfExpiryPeriod()
            );
        } catch (ExecutionException | InterruptedException e) {
          throw new RuntimeException(e);
        }
      }).thenApply(calculatedDate -> {
        calculatedRequest.changeHoldShelfExpirationDate(calculatedDate.value());
        return calculatedRequest;
      });
    return calculatedRequest;
  }
  
  
  
  ============================================
  
  
  
